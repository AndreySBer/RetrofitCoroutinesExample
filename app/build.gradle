apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ru.beryukhov.retrofitcoroutinesexample"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "YANDEX_API_KEY", "\"${getSecureApiKey()}\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    packagingOptions {
        exclude 'META-INF/kotlinx-io.kotlin_module'
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/proguard/coroutines.pro'
        exclude 'META-INF/kotlinx-coroutines-io.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'

    implementation 'com.google.android.material:material:1.1.0-alpha01'

    //implementation "io.ktor:ktor-client-android:1.2.6"
    implementation "io.ktor:ktor-client-okhttp:1.2.6"
    implementation "com.squareup.okhttp3:logging-interceptor:4.2.2"

    implementation "io.ktor:ktor-client-gson:1.2.6"
}

String getSecureApiKey() {
    final String KEY = "yandex_api_key"
    final String PROPERTIES_FILE = "local.properties"

    def missingKey = {
        def message = """

            ATTENTION!
            Need to create file [$PROPERTIES_FILE], with key:
            $KEY=...
            You may get API key from https://tech.yandex.ru/rasp/raspapi/
        
        """
        println(message)
        throw new Exception(message)
    }

    def secureFile = project.rootProject.file(PROPERTIES_FILE)
    if (!secureFile.exists()) {
        missingKey()
    }
    Properties secureProperties = new Properties()
    secureProperties.load(secureFile.newDataInputStream())
    if (secureProperties.getProperty(KEY) == null) {
        println(secureProperties.getProperty(KEY))
        missingKey()
    }
    return secureProperties[KEY]
}